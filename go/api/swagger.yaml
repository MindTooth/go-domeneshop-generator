openapi: 3.0.1
info:
  title: Domeneshop API Documentation
  description: |
    # Overview

    Domeneshop offers a simple, REST-based API, which currently supports the following
    features:

    - List domains
    - List invoices
    - Create, read, update and delete DNS records for domains
    - Create, read, update and delete HTTP forwards ("WWW forwarding") for domains
    - Dynamic DNS (DDNS) update endpoints for use in consumer routers

    More features are planned, including:

    - Web hosting administration
    - Email address and email user/account administration

    # Testing period

    The API service is in version 0, which means it is possible that the interface
    will change rapidly during the testing period. For that reason, **the documentation on these
    pages may sometimes be outdated.**

    Additionally, we make no guarantees about the stability of the API service during this testing period,
    and therefore ask customers to be careful with using the service for business critical purposes.

    # Authentication

    The Domeneshop API currently supports only one method of authentication, **HTTP Basic Auth**. More authentication methods may
    be added in the future.

    To generate credentials, visit <a href="https://www.domeneshop.no/admin?view=api" target="_blank">this page</a>
    after logging in to the control panel on our website:

    <a href="https://www.domeneshop.no/admin?view=api" target="_blank">https://www.domeneshop.no/admin?view=api</a>

    # Libraries

    Domeneshop maintains multiple API libraries to simplify using the API. Please note that these libraries
    have the same stability guarantees to the API while the API is in version 0.

    The libraries may be found in our [Github repository](https://github.com/domeneshop/).

    Domeneshop also maintains a plugin for [EFF's Certbot](https://certbot.eff.org/), which automates issuance and
    renewal of SSL-certificates on your own servers for domains that use Domeneshop's DNS service. This plugin is
    found in our Github repository [here](https://github.com/domeneshop/certbot-dns-domeneshop).

    <SecurityDefinitions />
  contact:
    name: API Support
    email: kundeservice@domeneshop.no
  version: v0
  x-logo:
    url: https://domene.shop/svg/logo-no.svg
    altText: Domeneshop
externalDocs:
  description: Domeneshop website
  url: https://www.domeneshop.no
servers:
- url: https://api.domeneshop.no/v0
security:
- basicAuth: []
tags:
- name: domains
  x-displayName: Domains
- name: dns
  description: |
    These endpoints allow you to list, create and delete DNS records for any domain that has
    active DNS service.
  x-displayName: DNS
- name: ddns
  description: |
    This group exposes endpoints that can be used by certain Dynamic DNS implementations found in consumer routers appliances.
  x-displayName: Dynamic DDNS (DDNS)
- name: forwards
  description: |
    These endpoints allow you to list, create and delete HTTP forwards ("WWW forwarding") for any domain
    that has active DNS service.

    While frame forwards (an `<iframe>` embed) are supported through setting the `frame` field, we strongly
    discourage the use of these. Use DNS records instead.
  x-displayName: HTTP Forwards
- name: invoices
  x-displayName: Invoices
- name: dns_record_models
  description: |
    These are the schema definitions for the different valid DNS record types.

    # A record
    <SchemaDefinition schemaRef="#/components/schemas/A" />

    # AAAA record
    <SchemaDefinition schemaRef="#/components/schemas/AAAA" />

    # CNAME record
    <SchemaDefinition schemaRef="#/components/schemas/CNAME" />

    # MX record
    <SchemaDefinition schemaRef="#/components/schemas/MX" />

    # SRV record
    <SchemaDefinition schemaRef="#/components/schemas/SRV" />

    # TXT record
    <SchemaDefinition schemaRef="#/components/schemas/TXT" />
  x-displayName: DNS record models
paths:
  /domains:
    get:
      tags:
      - domains
      summary: List domains
      operationId: getDomains
      parameters:
      - name: domain
        in: query
        description: Only return domains whose `domain` field includes this string
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: .no
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
                x-content-type: application/json
  /domains/{domainId}:
    get:
      tags:
      - domains
      summary: Find domain by ID
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
  /domains/{domainId}/dns:
    get:
      tags:
      - dns
      summary: List DNS records
      operationId: getDnsRecords
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: host
        in: query
        description: Only return records whose `host` field matches this string
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: www
      - name: type
        in: query
        description: Only return records whose `type` field matches this string
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: A
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DNSRecord'
                x-content-type: application/json
    post:
      tags:
      - dns
      summary: Add DNS record
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DNSRecord'
      responses:
        "201":
          description: Successful operation
          headers:
            location:
              description: The URL to the DNS record resource that was created
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "404":
          description: Domain domainId does not exist.
  /domains/{domainId}/dns/{recordId}:
    get:
      tags:
      - dns
      summary: Find DNS record by ID
      operationId: getRecordById
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: recordId
        in: path
        description: ID of DNS record
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSRecord'
    put:
      tags:
      - dns
      summary: Update DNS record by ID
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: recordId
        in: path
        description: ID of DNS record
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DNSRecord'
      responses:
        "204":
          description: Successful operation
        "400":
          description: DNS record failed validation
        "404":
          description: DNS record does not exist
    delete:
      tags:
      - dns
      summary: Delete DNS record by ID
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: recordId
        in: path
        description: ID of DNS record
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: DNS record is deleted
        "404":
          description: DNS record does not exist
  /domains/{domainId}/forwards/:
    get:
      tags:
      - forwards
      summary: List forwards
      description: List all forwards for the specified domain.
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HTTPForward'
                x-content-type: application/json
    post:
      tags:
      - forwards
      summary: Add forward
      description: |
        Create a forwarding for the specified domain, to a given URL.

        The forward must not collide with any existing forwarding or DNS record
        of types `A`, `AAAA`, `ANAME` or `CNAME`.
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "201":
          description: Successful operation
        "400":
          description: Invalid forward
        "409":
          description: The forward collides with an existing forwarding or DNS record
  /domains/{domainId}/forwards/{host}:
    get:
      tags:
      - forwards
      summary: Find forward by host
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: host
        in: path
        description: Subdomain of the forward, `@` for the root domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: www
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPForward'
        "404":
          description: Forward or domain not found
    put:
      tags:
      - forwards
      summary: Update forward by host
      description: |
        Update a forwarding for the specified domain, to a given URL.

        The `host` field must not be changed. In that case, delete the
        existing forwarding and recreate it for the new host/subdomain.
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: host
        in: path
        description: Subdomain of the forward, `@` for the root domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: www
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HTTPForward'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPForward'
        "400":
          description: Invalid forward
        "404":
          description: Forward or domain not found
        "412":
          description: Forward host was modified
    delete:
      tags:
      - forwards
      summary: Update forward by host
      description: |
        Delete a forwarding for the specified domain, to a given URL.

        The `host` field must not be changed. Delete the forwarding.
      parameters:
      - name: domainId
        in: path
        description: ID of the domain
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: host
        in: path
        description: Subdomain of the forward, `@` for the root domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: www
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPForward'
        "400":
          description: Invalid forward
        "404":
          description: Forward or domain not found
        "412":
          description: Forward host was modified
  /invoices:
    get:
      tags:
      - invoices
      summary: List invoices
      description: List invoices for your account. Only invoices from the past 3 years
        are returned.
      operationId: getInvoices
      parameters:
      - name: status
        in: query
        description: Only return invoices with this status
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Invoice/properties/status'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
                x-content-type: application/json
  /invoices/{invoiceId}:
    get:
      tags:
      - invoices
      summary: Find invoice by invoice number
      operationId: findInvoiceByNumber
      parameters:
      - name: invoiceId
        in: path
        description: An invoice number
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        "404":
          description: Invoice not found
  /dyndns/update:
    get:
      tags:
      - ddns
      summary: Update
      description: |
        Update DNS using the "IP update protocol".

        A DNS record for the given hostname will be created if it does not exist, or updated if it does. The record
        type (`A` or `AAAA` will automatically be detected).

        If the DDNS implementation does not allow you to specify authentication, it can usually be specified inline
        in the URL:

          ```
          https://{token}:{secret}@api.domeneshop.no/v0/dyndns/update?hostname=example.com&myip=127.0.0.1
          ```
      parameters:
      - name: hostname
        in: query
        description: The fully qualified domain (FQDN) to be updated, without trailing
          dot.
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: hostname
        example: www.example.com
      - name: myip
        in: query
        description: The new IPv4 or IPv6 address to set. If not provided, the IP
          of the client making the API request will be used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: ipv4|ipv6
      responses:
        "204":
          description: Successful operation
        "404":
          description: Domain not found
components:
  schemas:
    Domain:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        domain:
          type: string
          example: example.com
        expiry_date:
          type: string
          format: date
        registered_date:
          type: string
          format: date
        renew:
          type: boolean
          example: true
        registrant:
          type: string
          example: Ola Nordmann
        status:
          type: string
          description: Domain status
          enum:
          - active
          - expired
          - deactivated
          - pendingDeleteRestorable
        nameservers:
          maxItems: 6
          minItems: 2
          type: array
          example:
          - ns1.hyp.net
          - ns2.hyp.net
          - ns3.hyp.net
          items:
            type: string
        services:
          $ref: '#/components/schemas/DomainServices'
      example:
        nameservers:
        - ns1.hyp.net
        - ns2.hyp.net
        - ns3.hyp.net
        domain: example.com
        expiry_date: 2000-01-23
        id: 1
        renew: true
        registrant: Ola Nordmann
        services:
          registrar: true
          dns: true
          webhotel: none
          email: true
        registered_date: 2000-01-23
        status: active
    DomainServices:
      type: object
      properties:
        registrar:
          type: boolean
        dns:
          type: boolean
        email:
          type: boolean
        webhotel:
          type: string
          enum:
          - none
          - webmedium
          - websmall
          - weblarge
          - webxlarge
      description: Domain services
      example:
        registrar: true
        dns: true
        webhotel: none
        email: true
    BaseRecord:
      required:
      - host
      - id
      type: object
      properties:
        id:
          type: integer
          description: ID of DNS record
          readOnly: true
          example: 1
        host:
          type: string
          description: The host/subdomain the DNS record applies to
          example: '@'
        ttl:
          maximum: 604800
          minimum: 60
          type: integer
          description: TTL of DNS record in seconds. Must be a multiple of 60.
          format: int16
          default: 3600
    A:
      allOf:
      - $ref: '#/components/schemas/BaseRecord'
      - required:
        - data
        - type
        type: object
        properties:
          type:
            type: string
            enum:
            - A
          data:
            type: string
            description: IPv4 address
            format: ipv4
    AAAA:
      allOf:
      - $ref: '#/components/schemas/BaseRecord'
      - required:
        - data
        - type
        type: object
        properties:
          type:
            type: string
            enum:
            - AAAA
          data:
            type: string
            description: IPv6 address
            format: ipv6
    MX:
      allOf:
      - $ref: '#/components/schemas/BaseRecord'
      - required:
        - data
        - priority
        - type
        type: object
        properties:
          type:
            type: string
            enum:
            - MX
          data:
            type: string
            description: The target MX host.
            format: hostname
            example: mx.example.com
          priority:
            type: integer
            description: MX record priority, also known as preference. Lower values
              are usually preferred first, but this is not guaranteed
            format: int16
            example: 1
    SRV:
      description: SRV records yo!
      allOf:
      - $ref: '#/components/schemas/BaseRecord'
      - required:
        - data
        - port
        - priority
        - type
        - weight
        type: object
        properties:
          type:
            type: string
            enum:
            - SRV
          data:
            type: string
            description: The target hostname
            format: hostname
            example: www.example.com
          priority:
            type: integer
            description: SRV record priority, also known as preference. Lower values
              are usually preferred first
            format: int16
            example: 10
          weight:
            type: integer
            description: SRV record weight. Relevant if multiple records have same
              preference
            format: int16
            example: 100
          port:
            type: integer
            description: SRV record port. The port where the service is found.
            format: int16
            example: 443
    TXT:
      allOf:
      - $ref: '#/components/schemas/BaseRecord'
      - required:
        - data
        - type
        type: object
        properties:
          type:
            type: string
            enum:
            - TXT
          data:
            type: string
            description: Freeform text field.
            example: v=spf1 include:_spf.domeneshop.no ~all
    CNAME:
      allOf:
      - $ref: '#/components/schemas/BaseRecord'
      - required:
        - data
        - type
        type: object
        properties:
          type:
            type: string
            enum:
            - CNAME
          data:
            type: string
            description: The target hostname
            example: www.example.com
    DNSRecord:
      oneOf:
      - $ref: '#/components/schemas/A'
      - $ref: '#/components/schemas/AAAA'
      - $ref: '#/components/schemas/CNAME'
      - $ref: '#/components/schemas/MX'
      - $ref: '#/components/schemas/SRV'
      - $ref: '#/components/schemas/TXT'
    HTTPForward:
      properties:
        host:
          type: string
          description: |
            The subdomain this forward applies to, without the domain part.

            For instance, `www` in the context of the `example.com` domain signifies a forward for `www.example.com`.
          example: '@'
        frame:
          type: boolean
          description: Whether to enable frame forwarding using an iframe embed. **NOT**
            recommended for a variety of reasons.
          example: false
        url:
          type: string
          description: The URL to forward to. Must include scheme, e.g. `https://`
            or `ftp://`.
          example: https://www.example.com
      example:
        host: '@'
        url: https://www.example.com
        frame: false
    Invoice:
      properties:
        id:
          type: integer
          description: Invoice ID/number
          example: 1
        type:
          type: string
          enum:
          - invoice
          - credit_node
        amount:
          type: integer
          example: 120
        currency:
          type: string
          enum:
          - NOK
          - SEK
          - DKK
          - GBP
          - USD
        due_date:
          type: string
          description: The invoice due date. Only available for type `invoice`.
          format: date
        issued_date:
          type: string
          description: The date when the invoice was issued.
          format: date
        paid_date:
          type: string
          description: The payment date. Only available if the invoice has status
            `paid`.
          format: date
        status:
          type: string
          description: "`settled` is only applicable to credit notes. These are usually\
            \ created if \ndomains have been\n"
          example: paid
          enum:
          - unpaid
          - paid
          - settled
        url:
          type: string
          format: url
          example: https://www.domeneshop.no/invoice?nr=1&code=
      example:
        amount: 120
        issued_date: 2000-01-23
        due_date: 2000-01-23
        currency: NOK
        id: 1
        type: invoice
        paid_date: 2000-01-23
        url: https://www.domeneshop.no/invoice?nr=1&code=
        status: paid
    inline_response_201:
      type: object
      properties:
        id:
          type: integer
          description: ID of the created DNS record
          example: 1
      example:
        id: 1
  parameters:
    domainId:
      name: domainId
      in: path
      description: ID of the domain
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    recordId:
      name: recordId
      in: path
      description: ID of DNS record
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    invoiceId:
      name: invoiceId
      in: path
      description: An invoice number
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    forwardHost:
      name: host
      in: path
      description: Subdomain of the forward, `@` for the root domain
      required: true
      style: simple
      explode: false
      schema:
        type: string
      example: www
  securitySchemes:
    basicAuth:
      type: http
      description: |
        With the **HTTP Basic Auth** authentication method, the `token` is the username,
        and the `secret` is the password.

        See above for instructions on how to generate credentials.
      scheme: basic
x-tagGroups:
- name: Endpoints
  tags:
  - domains
  - dns
  - ddns
  - forwards
  - invoices
- name: Models
  tags:
  - dns_record_models
